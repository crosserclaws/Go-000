// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VideoInformerClient is the client API for VideoInformer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoInformerClient interface {
	// Get information of a video.
	GetVideoInfo(ctx context.Context, in *VideoInfoRequest, opts ...grpc.CallOption) (*VideoInfoReply, error)
}

type videoInformerClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoInformerClient(cc grpc.ClientConnInterface) VideoInformerClient {
	return &videoInformerClient{cc}
}

func (c *videoInformerClient) GetVideoInfo(ctx context.Context, in *VideoInfoRequest, opts ...grpc.CallOption) (*VideoInfoReply, error) {
	out := new(VideoInfoReply)
	err := c.cc.Invoke(ctx, "/video.v1.VideoInformer/GetVideoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoInformerServer is the server API for VideoInformer service.
// All implementations must embed UnimplementedVideoInformerServer
// for forward compatibility
type VideoInformerServer interface {
	// Get information of a video.
	GetVideoInfo(context.Context, *VideoInfoRequest) (*VideoInfoReply, error)
	mustEmbedUnimplementedVideoInformerServer()
}

// UnimplementedVideoInformerServer must be embedded to have forward compatible implementations.
type UnimplementedVideoInformerServer struct {
}

func (UnimplementedVideoInformerServer) GetVideoInfo(context.Context, *VideoInfoRequest) (*VideoInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInfo not implemented")
}
func (UnimplementedVideoInformerServer) mustEmbedUnimplementedVideoInformerServer() {}

// UnsafeVideoInformerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoInformerServer will
// result in compilation errors.
type UnsafeVideoInformerServer interface {
	mustEmbedUnimplementedVideoInformerServer()
}

func RegisterVideoInformerServer(s grpc.ServiceRegistrar, srv VideoInformerServer) {
	s.RegisterService(&_VideoInformer_serviceDesc, srv)
}

func _VideoInformer_GetVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoInformerServer).GetVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.v1.VideoInformer/GetVideoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoInformerServer).GetVideoInfo(ctx, req.(*VideoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VideoInformer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "video.v1.VideoInformer",
	HandlerType: (*VideoInformerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoInfo",
			Handler:    _VideoInformer_GetVideoInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/video/v1/videoinfo.proto",
}
